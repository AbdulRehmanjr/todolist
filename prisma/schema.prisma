generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Admin {
    adminId  String @id @default(uuid())
    password String @default("")
    role     Role   @default(ADMIN)
    email    String @unique
}

model Seller {
    sellerId  String  @id @default(uuid())
    firstName String  @default("")
    lastName  String  @default("")
    phone     String  @default("")
    userName  String  @default("")
    email     String  @unique
    password  String  @default("")
    role      Role    @default(SELLER)
    isActive  Boolean @default(false)
    storeId   String
    store     Store   @relation(fields: [storeId], references: [storeId], onDelete: Cascade)
}

model Store {
    storeId         String        @id @default(uuid())
    storeName       String        @default("")
    storeLogo       String        @default("")
    description     String        @default("")
    isActive        Boolean       @default(false)
    storeCategoryId String
    Category        Category[]
    PaymentInfo     PaymentInfo[]
    Product         Product[]
    Seller          Seller[]
    storeCategory   StoreCategory @relation(fields: [storeCategoryId], references: [storecategoryId], onDelete: Cascade)
}

model PaymentInfo {
    payment           String @id @default(uuid())
    trackingId        String @unique
    merchantId        String @default("")
    partner_client_id String @default("")
    email             String @unique
    storeStoreId      String
    Store             Store  @relation(fields: [storeStoreId], references: [storeId], onDelete: Cascade)
}

model StoreCategory {
    storecategoryId String  @id @default(uuid())
    name            String  @default("")
    sku             String  @default("")
    isActive        Boolean @default(true)
    Store           Store[]
}

model Product {
    productId    String   @id @default(uuid())
    name         String
    images       String[] @default([""])
    description  String
    sku          String
    isActive     Boolean
    stock        Int
    storeStoreId String
    categoryId   String
    category     Category @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade)
    store        Store    @relation(fields: [storeStoreId], references: [storeId], onDelete: Cascade)
}

model Category {
    categoryId   String    @id @default(uuid())
    name         String    @default("")
    sku          String    @default("")
    isActive     Boolean   @default(true)
    picture      String    @default("")
    storeStoreId String
    store        Store     @relation(fields: [storeStoreId], references: [storeId], onDelete: Cascade)
    Product      Product[]
}

enum Role {
    ADMIN
    SELLER
    BUYER
}

model Task {
    taskId   String  @id @default(uuid())
    taskName String
    isDone   Boolean @default(false)
}
